<html><head><meta http-equiv="Content-Type" content="application/html; charset=utf-8" /></head>
<body>

<style>
body {  font-family: Monaco; 
  font-size: 15px; line-height: 25px; background: black; padding: 0; margin: 0; }
  
h1 { font-size: 120%; color: white; text-align: center; margin-top: 1em; }
#tests { -webkit-column-count: 2; -webkit-column-gap: 10px; margin: 0 10px; }

.test { margin: 10px 0; padding: 5px; background: #122; }

p { margin: 0; }
.pass code { color: #BEFFBC; }
.fail code { color: #FF6156; }

.comment { color: #aaa; font-style: italic; font-size: 0.9em; line-height: 25px;  }
.match_name { font-size: 0.8em; float: left; color: #666;  }
.match_name:after { content: 'Â»'; margin: 0 0.5em; }

.input {  color: white; display: inline-block; padding: 0 2px;  }

code { background: #333; color: white; font-family: Monaco; line-height: 25px; font-size: 0.9em; margin-left: 1em; }
</style>

<script src="/ometa/lib.js"></script>
<script src="/ometa/ometa-base.js"></script>
<script src="/ometa/parser.js"></script>
<script src="/ometa/bs-js-compiler.js"></script>
<script src="/ometa/bs-ometa-compiler.js"></script>
<script src="/ometa/bs-ometa-optimizer.js"></script>
<script src="/ometa/bs-ometa-js-compiler.js"></script>

<script>
function translateCode(s) {
  var translationError = function(m, i) { alert("Translation error - please tell Alex about this!"); throw fail },
      tree             = BSOMetaJSParser.matchAll(s, "topLevel", undefined, function(m, i) { throw fail.delegated({errorPos: i}) })
  return BSOMetaJSTranslator.match(tree, "trans", undefined, translationError)
}
function ometa(s) { return eval(translateCode(s)) }
</script>

<script type="text/x-ometa-js" id="parser">
<%= read("parser.ojs") %>
</script>

<!-- ometa() is a compiler -->
<script>ometa(document.getElementById('parser').innerText)</script>

<script>
function match(comment, matcher, str, expectation) {
  test(comment,matcher,str,expectation,'match')
}

function matchAll(matcher, str, expectation) {
  test(comment,matcher,str,expectation,'matchAll')
}

function test(comment, matcher, str, expectation, type) {
  // todo: catch failing match
  var result = DSParser.matchAll(str,matcher);
  var status = result.toString() == expectation.toString() ? 'pass' : 'fail';
  var element = document.createElement('div');
  element.className = "test " + status;
  
  var matchName = document.createElement('span');
  matchName.className = "match_name";
  matchName.innerText = matcher;
  element.appendChild(matchName);
  
  var cmnt = document.createElement('p');
  cmnt.className = "comment";
  cmnt.innerText = comment;
  element.appendChild(cmnt)
  
  var input = document.createElement('span');
  input.className = "input";
  input.innerText = str;
  element.appendChild(input);
  
  var out = document.createElement('code');
  out.innerHTML = result.toString();
  element.appendChild(out);
  
  document.getElementById('tests').appendChild(element);
}

</script>

<h1>Parser Tests</h1>

<div id="tests"></div>

<script id="tests">
// Parser tests
<%= read('numeric.js') %>
<%= read('stringish.js') %>
<%= read('listish.js') %>
<%= read('calls.js') %>
<%= read('blockish.js') %>

</script>

</body></html>